title: Cloudflare Tunnel
name: cloudflared
use_python: false
expose: false

prepare_env: |-
  if env | grep -q "PAPERSPACE"; then
    echo "Tunnel is not allowed in Paperspace, skipping..."
    exit 0
  fi

  cd /tmp
  curl -L --output cloudflared.deb https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
  dpkg -i cloudflared.deb

start: |-
    if [[ $CF_TOKEN == "quick" ]]; then
        # Split EXPOSE_PORTS into an array using ':' as the delimiter
        IFS=':' read -ra names <<< "$PORT_MAPPING"
        IFS=':' read -ra ports <<< "$EXPOSE_PORTS"

        # Loop over the ports array
        paste <(printf '%s\n' "${names[@]}") <(printf '%s\n' "${ports[@]}") | while IFS=$'\t' read -r name port; do
            if [[ $port == "" ]]; then
                continue
            fi
            metrics_port=$((port-1000))

            # Generate PID file and log file names using a different delimiter
            pidfile="/tmp/cloudflared_${name}.pid"
            logfile="$LOG_DIR/cloudflared_${name}.log"
            hostfile="/tmp/cloudflared_${name}.host"
            
            # Check if tunnel is already running
            if check_if_running $pidfile; then
                log "Cloudflared tunnel for $name is already running."
                log "Visit https://$(cat $hostfile) for $name"
                continue
            fi
            
            log "Starting cloudflared tunnel for $name"
            # Start cloudflared tunnel in the background
            service_loop "cloudflared tunnel --url http://localhost:${port} --metrics localhost:${metrics_port}" > "$logfile" 2>&1 &
            echo $! > $pidfile

            # Wait for the tunnel to become available
            retries=0
            max_retries=10
            while true; do
                sleep 5
                response=$(curl -s http://localhost:${metrics_port}/quicktunnel || true)
                if [[ $? -eq 0 ]] && [[ "$(echo "$response" | jq -r '.hostname')" != "" ]]; then
                    hostname=$(echo "$response" | jq -r '.hostname')
                    echo $hostname > $hostfile
                    send_to_discord "Visit https://$hostname for $name"
                    break
                fi
                retries=$((retries+1))
                if [[ $retries -ge $max_retries ]]; then
                    log "Error: Failed to get response after $max_retries attempts"
                    send_to_discord "Cloudflared: Failed to get response after $max_retries attempts"
                    break
                fi
                echo "Failed to get response. Retrying in 5 seconds..."
                sleep 5
            done
        done
    elif [[ -n "${CF_TOKEN}" ]]; then
        if check_if_running "/var/run/cloudflared.pid"; then
            log "Cloudflared is already running"
        else
            cloudflared service install "$CF_TOKEN"
            send_to_discord "Cloudflared: Running as a service"
        fi
    else
        log "CF_TOKEN cannot be empty, either <quick> or a service token"
    fi

custom_start: ""
custom_reload: |-
      # Kill all and restart is not a good idea, only start tunnel if it's not running
      if [[ $CF_TOKEN == "quick" ]]; then
        bash main.sh
      fi
custom_stop: |-
      if [[ -n $2 ]]; then
          log "Stopping Cloudflare tunnel for $2"
          kill_pid /tmp/cloudflared_$2.pid
      else
        log "Stopping all Cloudflare tunnel(s)"
        for file in /tmp/cloudflared_*.pid; do
            kill_pid $file
        done
      fi

export_required_env: |-
    export REQUIRED_ENV="CF_TOKEN"
other_commands: ""